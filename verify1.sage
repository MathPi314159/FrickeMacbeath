print('This program proves an upper bound for the number of eigenvalues of the Laplacian on the Fricke-Macbeath surface in the interval [0.0, 0.4].\n')

from sage.symbolic.integration.integral import indefinite_integral

a = QQ(0.0)
b = QQ(0.4)
# The endpoints of the interval, stored as rational numbers 
print('a=',a,', b=',b,'\n')

Z = [ QQ(r) for r in [108.01] ]
# The list of double zeros for u, converted to rational numbers
W = [ QQ(r) for r in [1.53, 5.34, 11.45, 20.24, 33.23] ]
# The list of double zeros for v, converted to rational numbers

print('The list of prescribed double zeros for u is',Z,'\n')
print('The list of prescribed double zeros for v is',W,'\n')

S = (214523504756468362231085900679099196439396065167673885793407609019329731940330272179989489717485688640770386050827685930929742602329148644043139795729319823956149569985120838718388975159241061728323272688998482810772790116501740437439799653102197/168080577536179736782108666246648674032141532120288348953151567557768425570730079803335364070365420361535390299647133746660781677421540387676808663634414991364698991657591595538029111951060362311631192867411632554043925571356203040745452058031568, -72411235840067467325795719374784132921281150787985685659708091983046694641642832596059531340043122389226747678049676836044147459434315712194999122030040006541271573184018697132536410557021779762847312810265097001917056824224645246628761096888689/84040288768089868391054333123324337016070766060144174476575783778884212785365039901667682035182710180767695149823566873330390838710770193838404331817207495682349495828795797769014555975530181155815596433705816277021962785678101520372726029015784, 26645468414791114131638938306166499916794739252115238048133517340535028225023509666991019050730239513656278124122337935295773649418785119368649550355394902641641957884581890990855592853735826880591743672218549381468180812835744591412227873004165/42020144384044934195527166561662168508035383030072087238287891889442106392682519950833841017591355090383847574911783436665195419355385096919202165908603747841174747914397898884507277987765090577907798216852908138510981392839050760186363014507892, -9173713147031385648829930798745380910238423596422969953615827958797136742515202652122442772559771228787678288298165706115591247625377116253713575895557816753310295658349032108312129096846409352321728665233811289381054279569787659566527068561525/21010072192022467097763583280831084254017691515036043619143945944721053196341259975416920508795677545191923787455891718332597709677692548459601082954301873920587373957198949442253638993882545288953899108426454069255490696419525380093181507253946, 3092577553497465616050982286725435756903491553492855569052444262238610126088002146339125899739931574075062131736976740445342187491546422330242767725205946946610288600993417235729980678584048159480136107706656491730906371265865255728784605072500/10505036096011233548881791640415542127008845757518021809571972972360526598170629987708460254397838772595961893727945859166298854838846274229800541477150936960293686978599474721126819496941272644476949554213227034627745348209762690046590753626973, -1851368449753720183603868218545363954200948650572493373014084215851863333349813476355503185946893785028354694180428327476944861784427647751580647321461235639693068633335027960134741308216558625287243194339150368357761494252882429988765524375000/10505036096011233548881791640415542127008845757518021809571972972360526598170629987708460254397838772595961893727945859166298854838846274229800541477150936960293686978599474721126819496941272644476949554213227034627745348209762690046590753626973, 977005781909914213750927001473200402390838251794471099529829259410024917068978189470113864696400445120753023348933891993606175496060556144235067336828434127246217226641849809843040850719053744796614807501464287212793914039063381089307000000000/10505036096011233548881791640415542127008845757518021809571972972360526598170629987708460254397838772595961893727945859166298854838846274229800541477150936960293686978599474721126819496941272644476949554213227034627745348209762690046590753626973, -47992489945031818295599695454053341174899560640783927718275558736544387673530018330928963380129965894773122401610601280131759466224169550936203124284283094383516769893852411181139217553103089164949202400313331769131957870187281606850000000000/1500719442287319078411684520059363161001263679645431687081710424622932371167232855386922893485405538942280270532563694166614122119835182032828648782450133851470526711228496388732402785277324663496707079173318147803963621172823241435227250518139, -134186900153831026197681676141009153498264207360344713749227434366818973894579164630016066755112902670985609672000466076317827818461084169298044857090523265004088565461435837771247026812465695079885871496459572992387095653672520000000000000/214388491755331296915954931437051880143037668520775955297387203517561767309604693626703270497915076991754324361794813452373446017119311718975521254635733407352932387318356626961771826468189237642386725596188306829137660167546177347889607216877, 22341072687866214996652104232456054113862090339861517502082476480300176431432775515034096844080068095789048881731348433436229539644598514354916114976689568931981754625258408329673796241365048965270571127071596849144043125476946000000000000000/1500719442287319078411684520059363161001263679645431687081710424622932371167232855386922893485405538942280270532563694166614122119835182032828648782450133851470526711228496388732402785277324663496707079173318147803963621172823241435227250518139, -17223231457603254094512803559627767682869443334790057857481593604928834889054483342226902707770172353151150123848102969999757809639957401938490207303355598133893197377457242947770644504579341803370555631989114187079569276208000000000000000000/1500719442287319078411684520059363161001263679645431687081710424622932371167232855386922893485405538942280270532563694166614122119835182032828648782450133851470526711228496388732402785277324663496707079173318147803963621172823241435227250518139, 631518259757320145620692080667310448120484234407762263941645210848381403027339198411603664120680609550869698568830961453431562199273532129675236008709547459981571372762213795579020517981894309230358863459720296133856602400000000000000000000/136429040207938098037425865459942105545569425422311971552882765874812033742475714126083899407764139903843660957505790378783102010894107457529877162040921259224593337384408762612036616843393151226973370833938013436723965561165749221384295501649, 275293413361314857590674224857093143250913705634444130787466225259053718305651173890025344220752595477802043526264739916690792662627345226668700104468377703019901480971465504473509345448661122573313633044708236358815760000000000000000000000/136429040207938098037425865459942105545569425422311971552882765874812033742475714126083899407764139903843660957505790378783102010894107457529877162040921259224593337384408762612036616843393151226973370833938013436723965561165749221384295501649, 1866094712716155603872223285486008021807872280211209984086353346293949101444269734489626032287702008333732144314048835080989088599115545456328774475746238698326614028266822167990366446040020544703594840492692878884000000000000000000000000/10494541554456776772109681958457085041966878878639382427144828144216310287882747240467992262135703069526435458269676182983315539299546727502298243233917019940353333644954520200925893603337934709767182371841385648978766581628134555491099653973)
# The vector of coefficients for u (generated with another program) 
print("The vector of coefficients is",S,"\n")

P.<x> = PolynomialRing(QQ) 
# P is the polynomial ring with rational coefficients
L = [ P(gen_laguerre(n,-1/2,x)) for n in range(len(S))]
# A list of the generalized Laguerre polynomials L_n^(-1/2) for n between 0 and len(S)-1

u = sum([S[j]*L[j] for j in range(len(S))])
v = sum([(-1)^j*S[j]*L[j] for j in range(len(S))])
# This is the unique polynomial such that v(x^2)*e^(-x^2/2) is the Fourier transform of u(x^2)*e^(-x^2/2)
print("u is equal to",u,"\n")
print("v is equal to",v,"\n")

u_der = u.derivative()
v_der = v.derivative()
# The first derivative of u and v

u_der_der = u_der.derivative()
v_der_der = v_der.derivative()
# The second derivative of u and v

#The following verifies that u and v vanish at the prescribed orders at the zeros

flag = True
# A Boolean that we modify whenever a condition is not met

for j in range(len(Z)):
    if u(Z[j])!=0 :
        flag = False
        print('u does not vanish at one of the prescribed double zeros.\n')
                        
    if u_der(Z[j])!=0 :
        flag = False
        print('u_der does not vanish at one of the prescribed double zeros.\n')

    if u_der_der(Z[j])>=0 :
        flag = False
        print('either u vanishes to higher order at one of the prescribed zeros or it has a local minimum there, making it positive nearby.\n')

for j in range(len(W)):
    if v(W[j])!=0 :
        flag = False
        print('v does not vanish at one of the prescribed double zeros.\n')
                        
    if v_der(W[j])!=0 :
        flag = False
        print('v_der does not vanish at one of the prescribed double zeros.\n')

    if v_der_der(W[j])<=0 :
        flag = False
        print('either v vanishes to higher order at one of the prescribed zeros or it has a local maximum there, making it negative nearby.\n')

# We then check that u(x^2) has no other zeros in [5.7962,infinity) besides the double ones and is negative at 5.7962.

count = 0
for point in Z:
    if point >= (57962/10000)^2:
        count = count+1


if pari.polsturm(u,[(57962/10000)^2,Infinity])>count: 
    flag = False
    print('u has an extra zero.\n')
    
if u((57962/10000)^2)>=0: 
    flag = False
    print('u(x^2) is non-negative at 5.7962.\n')
    
print('The value of u at 5.7962^2 is',u((57962/10000)^2))

# We also check that that v has no extra zeros in [a-1/4,infinity) and satisfies v(a-1/4)>0.

count = 0
for point in W:
    if point >= a-1/4:
        count = count+1

if pari.polsturm(v,[a-1/4,Infinity])>count:
    flag = False
    print('v has an extra zero.\n')
    
if v(a-1/4)<=0: 
    flag = False
    print('v is non-positive at a-1/4.\n')
                               
# We then check that f^(x) = v(x^2)*e^(-x^2/2) is either monotone or has a unique local maximum on the interval [r(a),r(b)] where r(t)=sqrt(t-1/4)

crit = pari.polsturm(2*v_der-v,[a-1/4,b-1/4])

if crit>1:    
    flag = False
    print('f^ has more than one critical point in [r(a),r(b)].\n')

if crit==1:    
# This means that f^ has a critical point, so we check that it is a local maximum
    
    if 2*v_der(a-1/4)-v(a-1/4)<=0:    
        flag = False
        print('f^ does not have a positive derivative at r(a).\n')
            
    if 2*v_der(b-1/4)-v(b-1/4)>=0:    
        flag = False
        print('f^ does not have a negative derivative at r(b).\n')  

#If the number of critical points is zero, then f^ is monotone on the interval, hence attains its minimum at an endpoint.
        
# After all the checks, we verify the value of flag     
if flag==True:
    print('All the conditions on u and v are satisfied.\n')
    
# Finally, we estimate the upper bound that f yields from above using interval arithmetic
# Here RBF and CBF denote the RealBallField and ComplexBallField from the Arb package

# h is defined so that f^(x) = h(x^2)
def h(t):
    return v(t)*e^(-t/2)

# We first compute the minimum of f^ at r(a) and r(b), which gives a lower bound on the interval [r(a),r(b)].
# For this, we tell Sage to consider these inputs as real ball fields, so that subsequent calculations are done with interval arithmetic. 
lower_bound = min(h(RBF(a-1/4)),h(RBF(b-1/4)))
print('f^ is at least',lower_bound.lower(),'on [r(a),r(b)].\n')

# We then estimate the integral term in the Selberg trace formula
truncated_integral = 12*CBF.integral(lambda x, _: h(x^2)*x*tanh(CBF(pi)*x),0,200)

# For the remainder of the integral, we compute an indefinite integral and verify that it is a polynomial multiplied by e^(-x^2/2)
V(x) = indefinite_integral(h(x^2)*x,x)
D = e^(x^2/2)*V(x)
p = D.full_simplify()
if p.is_polynomial(x)!=True:
    print('Error, V is not of the form e^(-x^2/2)p(x) where p is a polynomial.\n')
remainder = -12*tanh(pi*200)*V(RBF(200))

# We compute the contribution of the shortest and second closed geodesics in the geometric term 
def f(x):
    return u(x^2)*e^(-x^2/2)
def w(x): 
    return (x/sinh(x/2))*f(x)
# This is the contribution of each geodesic of length x in the geometric sum (the factor of 2 is not there because we consider unoriented geodesics)

LenC=arccosh(cot(pi/3)*cot(pi/7))
LenB=arcsinh(sin(pi/3)*sinh(LenC))
LenA=arcsinh(sin(pi/7)*sinh(LenC))
l1 = 4*(LenA+LenB+LenC) 
# This is the systole of the Fricke-Macbeath surface 
l2 = 4*arccosh(sinh(LenA+LenB+LenC)*sinh(LenA+LenB+LenC))
# This is the length of the second shortest geodesics on the Fricke-Macbeath surface 
geom = RBF((1/sqrt(2*pi))*(126*w(l1)+252*w(l2)))
# There are 126 systoles of length l1 and 252 curves of length l2, so geom is the resulting sum

# We then compute the resulting upper bound on the number of eigenvalues in [a,b] (recall that h(-1/4) = f^(i/2))
multiplicity = (truncated_integral + remainder + geom)/lower_bound
print('The final upper bound is at most',RBF(multiplicity).upper())
# We convert the CBF element multiplicity to RBF to get an upper bound on it 
# (only CBF can compute integrals, but its balls do not have upper bounds)
